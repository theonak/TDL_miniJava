/*
   Grammaire attribuée pour construire l'arbre abstrait correspondant au langage Block
*/

package fr.n7.stl.block;

import java_cup.runtime.*;
import fr.n7.stl.block.Lexer;
import java.io.IOException;
import java.io.*;
import java.util.*;

// Elements du métamodèle pour la construction de l'arbre abstrait
import fr.n7.stl.block.ast.*;
import fr.n7.stl.block.ast.expression.*;
import fr.n7.stl.block.ast.expression.accessible.*;
import fr.n7.stl.block.ast.expression.allocation.*;
import fr.n7.stl.block.ast.expression.assignable.*;
import fr.n7.stl.block.ast.expression.value.*;
import fr.n7.stl.block.ast.instruction.*;
import fr.n7.stl.block.ast.instruction.declaration.*;
import fr.n7.stl.block.ast.scope.*;
import fr.n7.stl.block.ast.type.*;
import fr.n7.stl.block.ast.type.declaration.*;
import fr.n7.stl.miniJava.call.*;
import fr.n7.stl.miniJava.declaration.*;
import fr.n7.stl.miniJava.definition.*;
import fr.n7.stl.miniJava.methode.*;
import fr.n7.stl.miniJava.type.*;
import fr.n7.stl.tam.ast.*;
import fr.n7.stl.tam.ast.impl.*;
import fr.n7.stl.util.*;

/* Variables partagées dans les actions de l'aplnaalyseur syntaxique. */
parser code {:
	protected Lexer lexer;
	protected String name;
    public String getName() {
       return this.name;
    }
	public Parser(String _name) {
		this();
		this.name = _name;
	}
:}

/* Initialisation de l'analyseur lexical et des variables partagées. */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File(this.name);
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};

/* Expression qui permet de progresser dans l'analyse lexicale. */
scan with {: return lexer.next_token(); :};

/* Terminaux qui seront transmis par l'analyseur lexical. */
/* Partie miniJava */
terminal			UL_Classe, UL_Interface, UL_Herite, UL_Realise;
terminal			UL_Public, UL_Prive, UL_Protege, UL_Definitif, UL_Abstrait, UL_De_Classe;
terminal			UL_Classe_Principale, UL_Methode_Principale;
terminal	ThisAssignement		UL_Moi;
terminal UL_Super;
/* Partie Block */
terminal			UL_Point_Virgule, UL_Virgule, UL_Point, UL_Deux_Points, UL_Point_Interrogation, UL_Point_Exclamation;
terminal			UL_Egal, UL_Double_Plus, UL_Double_Moins, UL_Double_Plus_Prefixe, UL_Double_Moins_Prefixe;
terminal 			UL_Plus, UL_Moins, UL_Moins_Unaire, UL_Asterisque, UL_Oblique, UL_Pour_Cent;
terminal			UL_Esperluette, UL_Double_Barre, UL_Double_Esperluette;
terminal			UL_Parenthese_Ouvrante, UL_Parenthese_Fermante;
terminal			UL_Premier, UL_Second;
terminal			UL_Accolade_Ouvrante, UL_Accolade_Fermante;
terminal			UL_Crochet_Ouvrant, UL_Crochet_Fermant;
terminal			UL_Inferieur, UL_Superieur;
terminal			UL_Inferieur_Egal, UL_Superieur_Egal;
terminal			UL_Double_Egal, UL_Exclamation_Egal;
terminal			UL_Si, UL_Sinon, UL_Tant_Que, UL_Nouveau, UL_Afficher, UL_Retour;
terminal			UL_Definition_Constante, UL_Definition_Type, UL_Enregistrement, UL_Enumeration;
terminal			UL_Type_Booleen, UL_Type_Caractere, UL_Type_Chaine, UL_Type_Entier, UL_Type_Flottant, UL_Type_Vide;
terminal String		UL_Identificateur, UL_Chaine, UL_Caractere;
terminal String		UL_Nombre_Entier, UL_Nombre_Flottant, UL_Nul, UL_Vrai, UL_Faux; // Valeur transmise par l'analyseur lexical

/* Non terminaux avec type renvoyé par actions sémantiques (RESULT = ...) */
non terminal Block						Program;
/* début modification miniJava */
non terminal Block						Block; 
/* fin modification miniJava */
non terminal List<Instruction>			Instructions; 
non terminal Instruction				Instruction;
non terminal Instruction				Declaration;
non terminal List<Expression>			Expressions;
non terminal List<FieldDeclaration>		Champs;
non terminal FieldDeclaration			Champ;
non terminal List<LabelDeclaration>		Etiquettes;
non terminal LabelDeclaration			Etiquette;
non terminal List<ParameterDeclaration>	Parameters;
non terminal Pair<String,PartialType>	Identifiant;
non terminal Type						Type, Atomique;
non terminal Expression 				Expression;
non terminal AssignableExpression		Affectable;
/* miniJava */
non terminal List<ContainerDeclaration>	Elements;
non terminal  ContainerDeclaration Main, Class, Interface;
non terminal							Generics, TypeParameter, TypeParameters, Constraints;
non terminal							SingleInherits, MultipleInherits;
non terminal List<Instanciation>		Instances, Implements;
non terminal List<Definition> ClassElements;
non terminal List<MethodeSignature> InterfaceElements;
non terminal			Instanciation				Instance;
non terminal Definition ClassElement;
non terminal MethodeSignature InterfaceElement;
non terminal	Attribut				Attribute;
non terminal MethodeSignature  Signature;
non terminal  Methode Method;
non terminal Constructor Constructor;
non terminal  ConstructorPrelude;
non terminal							AccessRight, ElementNature;

/* Associativité et Priorité relative des opérateurs (du moins prioritaire au plus prioritaire) */
/* Opérateur le moins prioritiaire */
precedence nonassoc UL_Parenthese_Fermante;	// Résolution du conflit décaler/réduire sur conversion de type
precedence right UL_Egal;
precedence nonassoc UL_Point_Interrogation, UL_Deux_Points;
precedence left UL_Double_Barre;
precedence left UL_Double_Esperluette;
precedence nonassoc UL_Double_Egal, UL_Exclamation_Egal;
precedence nonassoc UL_Inferieur, UL_Inferieur_Egal, UL_Superieur, UL_Superieur_Egal;
precedence left UL_Plus, UL_Moins;
precedence left UL_Asterisque, UL_Oblique, UL_Pour_Cent;
precedence right UL_Nouveau;
precedence left UL_Premier, UL_Second;
precedence left UL_Double_Plus_Prefixe, UL_Double_Moins_Prefixe, UL_Moins_Unaire, UL_Esperluette, UL_Point_Exclamation;
precedence nonassoc UL_Double_Plus, UL_Double_Moins;
precedence left UL_Point; // , UL_Crochet_Ouvrant, UL_Parenthese_Ouvrante;
/* Opérateur le plus prioritaire */

/* Règles de grammaire attribuée pour la construction de l'arbre abstrait */
/* Program et Block sont des non terminaux */
/* UL_Identificateur est un terminal (Unité lexicale) */
/* Block est la variable utilisable dans l'action sémantique qui contient la valeur renvoyé par l'analyse du Block */
/* TODO */
Program ::= 
			Elements:elements 
			
			{: 
				
			SymbolTable tds = new SymbolTable();
				boolean resolveResult = true;
				boolean collectResult= true;
				for(ContainerDeclaration cd : elements){
				//System.out.println(cd);
                    if (cd instanceof ClasseDeclaration){
                    	
                        ClasseDeclaration cld = (ClasseDeclaration) cd;
                        collectResult =  cld.collect(tds) && collectResult;
                                		
                     }else if (cd instanceof MainClass){
                     	MainClass id = (MainClass) cd;
                        collectResult = id.collect(tds) && collectResult;
                     } else {
                      	InterfaceDeclaration id = (InterfaceDeclaration) cd;
                        collectResult = id.collect(tds) && collectResult;
				     }
				}if (!collectResult){System.out.println("Collect failed");}
				else{
				System.out.println("Collect Succeeded");
				for(ContainerDeclaration cd : elements){
					if (cd instanceof ClasseDeclaration){
						ClasseDeclaration cld = (ClasseDeclaration) cd;
						resolveResult = cld.resolve(tds) && resolveResult;
					}else if (cd instanceof MainClass){
						MainClass id = (MainClass) cd;
						resolveResult = id.resolve(tds) && resolveResult;
					} else {
                      	InterfaceDeclaration id = (InterfaceDeclaration) cd;
                        resolveResult = id.resolve(tds) && resolveResult;
				     }

				}
				if(!resolveResult)
				    System.out.println("Resolve failed");
				else {

				    System.out.println("Resolve succeeded");
					
					
				    boolean typeResult = true;

				    for(ContainerDeclaration cd : elements){
				        if (cd instanceof ClasseDeclaration){
				            ClasseDeclaration cld = (ClasseDeclaration) cd;
				            typeResult =  cld.checkType() && typeResult;
				        }else if (cd instanceof MainClass){
							MainClass m = (MainClass) cd;
							typeResult =  m.checkType() && typeResult;
						}else{
							InterfaceDeclaration id = (InterfaceDeclaration) cd;
							typeResult = id.checkType() && typeResult;
				         }
				    }
				    if(!typeResult)
				        System.out.println("CheckType failed");
				    else{

				        System.out.println("CheckType Worked");}
						/*
				        int size = 0 ;

				        for(ContainerDeclaration cd : elements){
				            if(cd instanceof ClasseDeclaration){
				                ClasseDeclaration cld = (ClasseDeclaration) cd;
				                size += cld.allocateMemory(Register.CB,size);
				            }
				        }

						TAMFactoryImpl factory = new TAMFactoryImpl();
						Fragment code = factory.createFragment();
						for(ContainerDeclaration cd : elements){
							if (cd instanceof ClasseDeclaration)
							{

								ClasseDeclaration cld = (ClasseDeclaration) cd;
								code.append(cld.getCode(factory));
							}
						}

						for(ContainerDeclaration cd : elements){
							if (cd instanceof ClasseDeclaration)
							{
								ClasseDeclaration cld = (ClasseDeclaration) cd;
								Methode main = cld.getMain();
								if(main != null)
								{
									main.allocateMemory(Register.SB,size);
									code.append(main.getCode(factory));
								}
							}
						}

						code.add(factory.createHalt());
						File file = new File(parser.getName() + "_tam");
						PrintStream printer = null;
						    try {
						        printer = new PrintStream( new FileOutputStream(file) );
						        printer.println( code );
						    } catch (IOException e) {
						        e.printStackTrace();
						    }

					}
*/}
				}
				
			:}
		;

/* ajout miniJava : classes, interfaces, attributs, méthodes, constructeurs, etc */
Elements ::= /* Lambda */
		{:
		List<ContainerDeclaration> _elements = new LinkedList<ContainerDeclaration>();  
				RESULT = _elements; 
		:}
		| Main:main Elements:elemts
		{:
				elemts.add(main); 
				RESULT = elemts; 
		:}
		| Interface:itrf Elements:elemts
		{:
		elemts.add( itrf );
		RESULT = elemts; 
		:}
		| Class:c Elements:elemts
		{:
		elemts.add( c );
		RESULT = elemts; 
		:}
		;
		
Interface ::= UL_Interface UL_Identificateur:nom 
		UL_Accolade_Ouvrante InterfaceElements:entetes UL_Accolade_Fermante
		{:
		RESULT = new InterfaceDeclaration(nom, entetes);
		:}
		;
		
Class ::= UL_Classe UL_Identificateur:nom Implements:interfaces
		UL_Accolade_Ouvrante ClassElements:elements UL_Accolade_Fermante
		{:
		RESULT = new ClasseDeclaration(nom, interfaces, elements);
		//System.out.println("ClasseDeclaration"); 
		//System.out.println(RESULT.toString());
		:}
		;
		
Main ::= UL_Public UL_Classe UL_Classe_Principale
		UL_Accolade_Ouvrante 
			UL_Public UL_De_Classe UL_Type_Vide UL_Methode_Principale 
			UL_Parenthese_Ouvrante Parameters:parametres UL_Parenthese_Fermante Block:bloc UL_Accolade_Fermante
		{:
		RESULT = new MainClass(parametres, bloc);
		:}
		;
		
Implements ::= /* Lambda */
		{:
		:}
		|
		UL_Realise Instances:inst
		{:
		RESULT = inst;
		:}
		;
		
Instances ::= Instance:inst UL_Virgule Instances:instances
		{:
		List<Instanciation> _elements = new LinkedList<Instanciation>(instances); 
		_elements.add(inst); 
		RESULT = _elements; 
		:}
		|
		Instance:inst
		{:
		List<Instanciation> _elements = new LinkedList<Instanciation>(); 
		_elements.add(inst); 
				RESULT = _elements; 
		:}
		;
		
Instance ::= UL_Identificateur:nom
		{:
		RESULT = new Instanciation(nom);
		:}
		;
		
ClassElements ::= /* Lambda */
		{:
		:}
		| AccessRight ClassElement:element ClassElements:elements
		{:
		List<Definition> _elements;
		if( elements!= null) {
			 _elements = new LinkedList<Definition>(elements); 
			 _elements.add(element); 
		}else {
			_elements = new LinkedList<Definition>(); 
			_elements.add(element); 
		}
				RESULT = _elements; 
		:}
		;
		
InterfaceElements ::= /* Lambda */
		{:
		:}
		| InterfaceElement:element InterfaceElements:elements
		{:
		List<MethodeSignature> _elements;
		if( elements!= null) {
			 _elements = new LinkedList<MethodeSignature>(elements); 
		}else {
			_elements = new LinkedList<MethodeSignature>(); 
			_elements.add(element); 
		}
		RESULT = _elements; 
		:}
		;
		
AccessRight ::=
		UL_Public
		{:
		:}
		| UL_Protege
		{:
		:}
		| UL_Prive
		{:
		:}
		;
		
ElementNature ::=
		UL_De_Classe
		{:
		:}
		| /* Lambda */
		{:
		:}
		;		
		
ClassElement ::=
		Attribute:attribute
		{:
		RESULT = new Definition(attribute);
		:}
		|
		Method:method
		{:
		RESULT = new Definition(method);
		:}
		|
		Constructor:constructor
		{:
		RESULT = new Definition(constructor);
		:}
		;
		
InterfaceElement ::=
		Signature:entete UL_Point_Virgule
		{:
		RESULT=entete;
		:}
		;

Attribute ::=
		Type:type Identifiant:identifiant UL_Point_Virgule
		{:
		RESULT  = new Attribut(type,identifiant.getLeft());
		:}
		|
		Type:type Identifiant:identifiant UL_Egal Expression:valeur UL_Point_Virgule
		{:
		RESULT  = new Attribut(type,identifiant.getLeft(),valeur,false, false);
		:}
		|
		UL_De_Classe Type:type Identifiant:identifiant UL_Egal Expression:valeur UL_Point_Virgule
		{:
		RESULT  = new Attribut(type,identifiant.getLeft(),valeur,true, false);
		:}
		|
		UL_De_Classe UL_Definitif Type:type Identifiant:identifiant UL_Egal Expression:valeur UL_Point_Virgule
		{:
		RESULT  = new Attribut(type,identifiant.getLeft(),valeur,true, true);
		:}
		;
		
Method ::=
		Signature:entete Block:corps
		{:
		RESULT = new Methode(entete, corps);
		:}
		| 
		UL_Definitif Signature:entete Block:corps
		{:
		RESULT = new Methode(entete, corps, false, false);
		:}
		| 
		UL_De_Classe Signature:entete Block:corps
		{:
		RESULT = new Methode(entete, corps, true, false);
		:}
		| 
		UL_De_Classe UL_Definitif Signature:entete Block:corps
		{:
		RESULT = new Methode(entete, corps, true,true);
		:};
		
Signature ::=
		Type:type Identifiant:identifiant UL_Parenthese_Ouvrante Parameters:parametres UL_Parenthese_Fermante
		{:
		RESULT = new MethodeSignature(identifiant.getLeft(),type,parametres);
		:}
		|
		Type:type Identifiant:identifiant UL_Parenthese_Ouvrante UL_Parenthese_Fermante
		{:
		
		RESULT = new MethodeSignature(identifiant.getLeft(),type,new ArrayList<ParameterDeclaration>());
		:}
		;
		
Constructor ::=
		UL_Identificateur:nom UL_Parenthese_Ouvrante Parameters:parametres UL_Parenthese_Fermante Block:bloc
		{:
		RESULT = new Constructor(nom,parametres,bloc);
		:}
		|
		UL_Identificateur:nom UL_Parenthese_Ouvrante UL_Parenthese_Fermante Block:bloc
		{:
		RESULT = new Constructor(nom,new LinkedList<ParameterDeclaration>() ,bloc);
		:}
		;

/* fin ajout miniJava */
Block ::= UL_Accolade_Ouvrante Instructions:instructions UL_Accolade_Fermante 
			{: 
				RESULT = new Block( instructions ); 
			:}
		;
		
/* retrait miniJava
Champ ::= Type:type Identifiant:identifiant UL_Point_Virgule 
			{: 
				Type _type = identifiant.getRight();
				if (_type == null) {
					_type = type;
				} else {
					_type = ((PartialType)_type).complete( type );
 				}
				RESULT = new FieldDeclaration( identifiant.getLeft(), _type);
			:}
		;
		
Champs ::= Champs:champs Champ:champ
			{: 
				champs.add(champ); 
				RESULT = champs; 
			:} 
		| Champ:champ
			{: 
				List<FieldDeclaration> _champs = new LinkedList<FieldDeclaration>(); 
				_champs.add(champ); 
				RESULT = _champs; 
			:}
		;

Etiquette ::= UL_Identificateur:nom
				{: 
					RESULT = new LabelDeclaration( nom ); 
				:}
			;
		
Etiquettes ::= Etiquettes:etiquettes UL_Virgule Etiquette:etiquette
			{: 
				etiquettes.add(etiquette); 
				RESULT = etiquettes; 
			:} 
		| Etiquette:etiquette
			{: 
				List<LabelDeclaration> _etiquettes = new LinkedList<LabelDeclaration>(); 
				_etiquettes.add(etiquette); 
				RESULT = _etiquettes; 
			:}
		;
fin retrait miniJava */
		
Atomique ::= UL_Type_Booleen
			{: 
				RESULT = AtomicType.BooleanType; 
			:}
		|	UL_Type_Caractere
			{: 
				RESULT = AtomicType.CharacterType; 
			:}
		|	UL_Type_Chaine
			{: 
				RESULT = AtomicType.StringType; 
			:}
		|	UL_Type_Entier
			{: 
				RESULT = AtomicType.IntegerType; 
			:}
		|	UL_Type_Flottant
			{: 
				RESULT = AtomicType.FloatingType; 
			:}
		|	UL_Type_Vide
			{: 
				RESULT = AtomicType.VoidType; 
			:}
		;
		
Type ::= Atomique:atomique
			{: 
				RESULT = atomique; 
			:}
		/* ajout miniJava */
		| Instance:instance
			{:
			RESULT = instance;
			:}
		/* fin ajout miniJava */
		/* retrait miniJava
		| UL_Identificateur:nom
			{: 
				RESULT = new NamedType( nom ); 
			:}
		| UL_Enregistrement UL_Identificateur:nom UL_Accolade_Ouvrante Champs:champs UL_Accolade_Fermante
			{: 
				RESULT = new RecordType( nom, champs ); 
			:}
		| UL_Enumeration UL_Identificateur:nom UL_Accolade_Ouvrante Etiquettes:etiquettes UL_Accolade_Fermante
			{: 
				RESULT = new EnumerationType( nom, etiquettes ); 
			:}
		| UL_Enregistrement UL_Identificateur:nom
			{: 
				RESULT = new NamedType( nom ); 
			:}
		| UL_Enumeration UL_Identificateur:nom
			{: 
				RESULT = new NamedType( nom ); 
			:}
				| UL_Inferieur Type:gauche UL_Virgule Type:droit UL_Superieur
			{:
				RESULT = new CoupleType( gauche, droit );
			:} 
		fin retrait miniJava */
		;

Instructions ::= Instructions:instructions Instruction:instruction
				{:
					instructions.add( instruction );
					RESULT = instructions; 
				:}
			|
				{: RESULT = new LinkedList<Instruction>(); :}
			;
			
Identifiant ::= UL_Identificateur:nom
				{: 
					RESULT = new Pair<String,PartialType>( nom, null ); 
				:}
			/* debut retrait miniJava
			| UL_Asterisque Identifiant:identifiant 
				{:
					if (identifiant.getRight() == null) {
						identifiant.setRight( new PartialPointerType() );
					} else {
						identifiant.getRight().enrich(new PartialPointerType());
					}
					RESULT = identifiant;
				:}
			fin retrait miniJava */
			| Identifiant:identifiant UL_Crochet_Ouvrant UL_Crochet_Fermant 
				{:
					if (identifiant.getRight() == null) {
						identifiant.setRight( new PartialArrayType() );
					} else {
						identifiant.getRight().enrich(new PartialArrayType());
					}
					RESULT = identifiant;
				:}
			/* debut retrait miniJava
			| UL_Parenthese_Ouvrante Identifiant:identifiant UL_Parenthese_Fermante
				{:
					RESULT = identifiant;
				:}
			fin retrait miniJava */
			;
			
Parameters ::= Parameters:parameters UL_Virgule Type:type Identifiant:identifiant
				{:
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = parameters;
				:}
			| Type:type Identifiant:identifiant
				{:
					List<ParameterDeclaration> _parameters = new LinkedList<ParameterDeclaration>();
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					_parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = _parameters;
				:}
			;
			
Declaration ::= Type:type Identifiant:identifiant UL_Egal Expression:valeur UL_Point_Virgule
				{:
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					RESULT = new VariableDeclaration( identifiant.getLeft(), _type, valeur);
				:}
			/* début retrait miniJava
			| Type:type Identifiant:identifiant UL_Parenthese_Ouvrante Parameters:parametres UL_Parenthese_Fermante Block:corps
				{:
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					RESULT = new FunctionDeclaration( identifiant.getLeft(), _type, parametres, corps);
 
				:}
			| Type:type Identifiant:identifiant UL_Parenthese_Ouvrante UL_Parenthese_Fermante Block:corps
				{:
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					List<ParameterDeclaration> _parametres = new LinkedList<ParameterDeclaration>();
					RESULT = new FunctionDeclaration( identifiant.getLeft(), _type, _parametres, corps);
 
				:}
			| UL_Definition_Type Type:type Identifiant:identifiant UL_Point_Virgule
				{:
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					RESULT = new TypeDeclaration( identifiant.getLeft(), _type); 
				:}
			| UL_Definition_Constante Type:type Identifiant:identifiant UL_Egal Expression:valeur UL_Point_Virgule
				{: 
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					RESULT = new ConstantDeclaration( identifiant.getLeft(), _type, valeur); 
				:}
			fin retrait miniJava */
			;

Instruction ::= Declaration:declaration
				{: 
					RESULT = declaration; 
				:}
			| Affectable:affectable UL_Egal Expression:expression UL_Point_Virgule
				{:
					RESULT = new Assignment( affectable, expression);
				:}
			/* début ajout miniJava : appel de méthodes sans retour */
			| Affectable:affectable UL_Point_Virgule
				{:
				:}
			/* fin ajout miniJava */
			| UL_Afficher Expression:expression UL_Point_Virgule
				{:
					RESULT = new Printer( expression );
				:}
			| UL_Si UL_Parenthese_Ouvrante Expression:condition UL_Parenthese_Fermante Block:alors UL_Sinon Block:sinon
				{: 
					RESULT = new Conditional( condition, alors, sinon); 
				:}
			| UL_Retour Expression:expression UL_Point_Virgule
				{:
					RESULT = new Return( expression);
				:}
			;
			
Expressions ::= Expressions:expressions UL_Virgule Expression:expression 	
				{:
					expressions.add( expression );
					RESULT = expressions; 
				:}
            | Expression:expression								
            		{: 
					List<Expression> _expressions = new LinkedList<Expression>();
					_expressions.add( expression );
					RESULT = _expressions;
				:}
            ;
            
Affectable ::= UL_Identificateur:nom
				{:
					RESULT = new VariableAssignment( nom );
				:}
			/* début ajout miniJava */
			| UL_Moi:moi
				{:
				RESULT =new ThisAssignement();
				
				:}
			/*| UL_Super
				{:
				:}
			*/
			/* fin ajout miniJava */
			/* début retrait miniJava
			| UL_Asterisque Affectable:pointeur
				{:
					RESULT = new PointerAssignment( pointeur );
				:}
			fin retrait miniJava */
			| Affectable:tableau UL_Crochet_Ouvrant Expression:indice UL_Crochet_Fermant
				{:
					RESULT = new ArrayAssignment( tableau, indice);
				:}
			| UL_Parenthese_Ouvrante Affectable:affectable UL_Parenthese_Fermante
				{:
					RESULT = affectable;
				:}
			| UL_Parenthese_Ouvrante UL_Identificateur:type UL_Parenthese_Fermante Affectable:affectable    
             	{: 
					RESULT = new AssignableConversion( affectable, type); 
				:}
			| UL_Parenthese_Ouvrante Atomique:type UL_Parenthese_Fermante Affectable:affectable    
             	{: 
					RESULT = new AssignableConversion( affectable, type); 
				:}
			| Affectable:enregistrement UL_Point UL_Identificateur:etiquette
				{:
					RESULT = new FieldAssignment( enregistrement, etiquette);
				:}
			/* ajout miniJava : appels de méthode */
			| Affectable:affectable UL_Parenthese_Ouvrante UL_Parenthese_Fermante
				{:
				//RESULT = new MethodCall(affectable, null);
				:}
			| Affectable:affectable UL_Parenthese_Ouvrante Expressions:parametres UL_Parenthese_Fermante
				{:
				//RESULT = new MethodCall(affectable, parametres);
				:}
			/* ajout miniJava */
			;
			            
Expression ::= /* TODO (modifications à faire pour 2022) : Affectable:affectable UL_Egal Expression:expression 
				{:
					RESULT = new Assignment( affectable, expression);
				:}
			| */ Expression:gauche UL_Double_Egal Expression:droite         
				{: 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Equals, droite); 
				:}
			| Expression:gauche UL_Exclamation_Egal Expression:droite         
				{: 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Different, droite); 
				:}
			| Expression:gauche UL_Inferieur Expression:droite         
				{: 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Lesser, droite); 
				:}
			| Expression:gauche UL_Superieur Expression:droite         
				{: 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Greater, droite); 
				:}
			| Expression:gauche UL_Inferieur_Egal Expression:droite         
				{: 
					RESULT = new BinaryExpression( gauche, BinaryOperator.LesserOrEqual, droite); 
				:}
			| Expression:gauche UL_Superieur_Egal Expression:droite         
				{: 
					RESULT = new BinaryExpression( gauche, BinaryOperator.GreaterOrEqual, droite); 
				:}
			| Expression:gauche UL_Double_Barre Expression:droite         
				{: 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Or, droite); 
				:}
            | Expression:gauche UL_Double_Esperluette Expression:droite        	
             	{: 
					RESULT = new BinaryExpression( gauche, BinaryOperator.And, droite); 
				:}
			| Expression:gauche UL_Plus Expression:droite         
				{: 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Add, droite); 
				:}
            | Expression:gauche UL_Moins Expression:droite        	
             	{: 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Substract, droite); 
				:}
            | Expression:gauche UL_Asterisque Expression:droite        
             	{: 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Multiply, droite); 
				:}
			| Expression:gauche UL_Oblique Expression:droite        
             	{: 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Divide, droite); 
				:}
			| Expression:gauche UL_Pour_Cent Expression:droite        
             	{: 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Modulo, droite); 
				:}
            | UL_Moins Expression:expression                 
             	{: 
					RESULT = new UnaryExpression( UnaryOperator.Opposite, expression); 
				:} 	
            | UL_Point_Exclamation Expression:expression                 
             	{: 
					RESULT = new UnaryExpression( UnaryOperator.Negate, expression); 
				:} 

			| Expression:expression UL_Crochet_Ouvrant Expression:indice UL_Crochet_Fermant
				{:
				
					RESULT = new ArrayAccess( expression, indice );
				:}
			| Expression:expression UL_Point UL_Identificateur:etiquette
				{:
					RESULT = new FieldAccess( expression, etiquette );
				:}
			| Expression:condition UL_Point_Interrogation Expression:alors UL_Deux_Points Expression:sinon
				{:
					RESULT = new ConditionalExpression( condition, alors, sinon);
				:}
			| UL_Parenthese_Ouvrante Expression:expression UL_Parenthese_Fermante	         
             	{: 
					RESULT = expression; 
				:}
			| UL_Parenthese_Ouvrante UL_Identificateur:type UL_Parenthese_Fermante Expression:expression    
             	{: 
					RESULT = new AccessibleConversion( expression, type); 
				:}
			| UL_Parenthese_Ouvrante Atomique:type UL_Parenthese_Fermante Expression:expression    
             	{: 
					RESULT = new AccessibleConversion( expression, type); 
				:}

			| UL_Identificateur:nom	                     
             	{: 
					RESULT = new IdentifierAccess( nom ); 
				:}
			| /* début adaptation miniJava */
				Expression:fonction	UL_Parenthese_Ouvrante Expressions:parametres UL_Parenthese_Fermante                     
             	{: 
					
					RESULT = new MethodCall( fonction, parametres ); 
					
				:}
			|
				Expression:fonction	UL_Parenthese_Ouvrante UL_Parenthese_Fermante                     
             	{:
					
					List<Expression> _parametres = new LinkedList<Expression>();
					RESULT = new MethodCall( fonction, _parametres );
					
				:}
				/* fin adaptation miniJava */
			| UL_Nombre_Entier:entier	                     
             	{: 
					RESULT = new IntegerValue( entier ); 
				:}
			| UL_Vrai                     
             	{: 
					RESULT = BooleanValue.True; 
				:}
			| UL_Faux                     
             	{: 
					RESULT = BooleanValue.False; 
				:}
			/* début ajout miniJava */
			| UL_Moi
				{:
				RESULT = new ThisAssignement( );
				:}
			/*| UL_Super */
				{:
				//RESULT = new SuperClass();
				:}
			/* fin ajout miniJava */
			| UL_Nul	                     
             	{: 
					RESULT = NullValue.Null; 
				:}
			| UL_Nombre_Flottant:flottant	                     
             	{: 
					RESULT = new FloatingValue( flottant ); 
				:}
			| UL_Caractere:caractere	                     
             	{: 
					RESULT = new CharacterValue( caractere ); 
				:}
			| UL_Chaine:chaine	                     
             	{: 
					RESULT = new StringValue( chaine ); 
				:}
			| UL_Nouveau Type:type UL_Crochet_Ouvrant Expression:taille UL_Crochet_Fermant	                     
             	{: 
					RESULT = new ArrayAllocation( type, taille ); 
				:}
			/* début adaptation miniJava : constructeur sans paramètre */
			| UL_Nouveau Type:type UL_Parenthese_Ouvrante UL_Parenthese_Fermante	                     
             	{: 
					List<Expression> _parametres = new LinkedList<Expression>();
					 RESULT = new ConstructorCall(type, _parametres); 
					
				:}
			/* fin adaptation miniJava */
			/* début ajout miniJava : constructeur avec paramètres */
			| UL_Nouveau Type:type UL_Parenthese_Ouvrante Expressions:parametres UL_Parenthese_Fermante	                     
             	{: 
					RESULT = new ConstructorCall(type,parametres);
				:}
			/* fin ajout miniJava */
            ;
       